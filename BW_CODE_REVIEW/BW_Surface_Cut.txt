Label By Geodesic()

int i,j,a,b,c;
int np = m_Path.getNelm(); // get number of vertices on path
int i1 = m_Path[0];        // first vertex on path
int i2 = m_Path[np-1];     // last vertex on path
int i3;

if(i1 != i2)
  cerr << "path is not closed!" << endl;
  return;

int nv = m_surface->getNumVert();

Array1D<u_char> inPath(nv); // initialize array of size nv
inPath = 0U;                // I think 0U is just boolean false

// iterate through vertices on path
// if duplicate vertices, don't include those in path
// because otherwise it would cause problems with coloring
for i from 0 to np
    int v = m_Path(i);
    for j from 0 to np  // iterate through vertices on Path
        if (j != i) && (m_path[j] == v) // check if path loops back on itself
            break;
    if (j >= np)    // this could also just be j == np right?
        inPath[v] = 1U; // include vertex v in path

m_isRed.setDim(nv); // initialize array to keep track of which vertices we want
                    // to color red
m_isRed = 0U;       // initialize all elements to false

// iterate through cells in mesh
// not sure how this is supposed to only get the interior vertices??
for (i = 0; i < mesh->GetNumberOfCells(); i++) {
    vtkIdType* pts;
    mesh->GetCellPoints(i, pts);

    // get vertex Ids that comprise the current cell
    a = pts[0];
    b = pts[1];
    c = pts[2];

    // if none of the cell vertices are on the path, skip this iteration of the loop
    if (!inPath[a] && !inPath[b] && !inPath[c])
        continue;

    // iterate through vertices on path
    for (j = 0; j < np - 1; j++) {

        // get consecutive points along path
        i1 = m_Path[j];
        i2 = m_Path[j + 1];

        // if 2/3 vertices are on path, label third vertex as red
        // (the one that isn't along the path)
        if ((i1 == a) && (i2 == b) && !inPath[c]) {
            m_isRed[c] = 1U;
            break;
        } else if ((i1 == b) && (i2 == c) && !inPath[a]) {
            m_isRed[a] = 1U;
            break;
        } else if ((i1 == c) && (i2 == a) && !inPath[b]) {
            m_isRed[b] = 1U;
            break;
        }

        // can break once an if statement is reached because each cell can only
        // have at most one segment on the path
    }
}

int iter = 0;
int hit = 1;

// how do you ensure this only grows inward not outward??
while (hit) {
    // if too many iterations?? where did this number 1000 come from
    if (++iter > 1000) break;

    hit = 0;
    for (i = 0; i < mesh->GetNumberOfCells(); i++) {
        vtkIdType* pts;
        mesh->GetCellPoints(i, pts);

        // get vertex Ids that comprise the current cell
        a = pts[0];
        b = pts[1];
        c = pts[2];

        // if any of the vertices lie on the path, then skip this iteration
        if (inPath[a] || inPath[b] || inPath[c])
    		continue;

        // if one vertex of cell is red and at least one of the other two vertices
        // is not red, then color other two vertices red
        // set hit to 1 to signify that algorithm is still adding more cells
        if (m_isRed[a] && (!m_isRed[b] || !m_isRed[c])) {
            m_isRed[b] = m_isRed[c] = 1U; hit = 1;
    	} else if (m_isRed[b] && (!m_isRed[a] || !m_isRed[c])) {
            m_isRed[a] = m_isRed[c] = 1U; hit = 1;
    	} else if (m_isRed[c] && (!m_isRed[a] || !m_isRed[b])) {
    		m_isRed[a] = m_isRed[b] = 1U; hit = 1;
        }
    }
}
